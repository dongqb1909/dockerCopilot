// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	auth "github.com/onlyLTY/dockerCopilot/internal/handler/auth"
	container "github.com/onlyLTY/dockerCopilot/internal/handler/container"
	image "github.com/onlyLTY/dockerCopilot/internal/handler/image"
	progress "github.com/onlyLTY/dockerCopilot/internal/handler/progress"
	version "github.com/onlyLTY/dockerCopilot/internal/handler/version"
	"github.com/onlyLTY/dockerCopilot/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/",
				Handler: webindexHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/auth",
				Handler: auth.LoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/progress/:taskid",
				Handler: progress.GetProgressHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/containers",
				Handler: container.ContainersListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/container/:id/start",
				Handler: container.StartHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/container/:id/stop",
				Handler: container.StopHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/container/:id/restart",
				Handler: container.RestartHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/container/:id/rename",
				Handler: container.RenameHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/container/:id/update",
				Handler: container.UpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/container/backup",
				Handler: container.BackupHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/container/listBackups",
				Handler: container.ListBackupsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/container/backups/:filename/restore",
				Handler: container.RestoreHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/container/backups/:filename",
				Handler: container.DelRestoreHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/images",
				Handler: image.ImagesListHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/image/:id",
				Handler: image.RemoveHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/version",
				Handler: version.VersionHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/program",
				Handler: version.UpdateProgramHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api"),
	)
}
